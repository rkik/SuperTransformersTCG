function onload()
  -- Load inside the script since global images do not work for players who join late.
  local resourceAssets = {
    {
      name = "blue_battlefield_claim",
      url = "http://cloud-3.steamusercontent.com/ugc/952959000918851189/EE82D1A6844C4548CDA3AA486D91D00BE7FFE048/"
    },
    {
      name = "red_battlefield_claim",
      url = "http://cloud-3.steamusercontent.com/ugc/952959000918850667/5CBF41F8886AC21025405DE4568BE998F478165E/"
    },
    {
      name = "ingame_gui_background",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666385380/A47369F346253BDE02F44153C4940D47AA0E6E67/"
    },
    {
      name = "ingame_blue_panel_overlay",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666384731/E921F14A80CFA7C3BC20C7D7C61D7319443D0169/"
    },
    {
      name = "ingame_red_panel_overlay",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666389779/69DCF9BD43E89F93351F7F2F8E87D5CFFD7E3EF7/"
    },
    {
      name = "ingame_gui_maximize",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666387411/82FAD658AECC1F80A3413BEB32A2971FF168E4BF/"
    },
    {
      name = "ingame_gui_resource",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666388925/ACEB3703278FB7DFB707BFE2DE931571529BD372/"
    },
    {
      name = "ingame_gui_pass",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666388357/43FDE0C7B097A67D681F9D35D91535A8EA66F3EE/"
    },
    {
      name = "ingame_gui_shuffle",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666389375/842D3237A768D7171668FCD28264F81C30BFEE0D/"
    },
    {
      name = "ingame_gui_discard",
      url = "http://cloud-3.steamusercontent.com/ugc/948454725666386672/85210903AED7A7F638BA6784A45A042013DD28FC/"
    }
  }
  self.UI.setCustomAssets(resourceAssets)

  tokenplayerone = Global.getTable('tokenplayerone')
  tokenplayertwo = Global.getTable('tokenplayertwo')

  if self.getName() == 'Blue' then
    owner = 'Blue'
  else
    owner = 'Red'
  end

  if owner == 'Blue' then
    self.UI.setXml([[
<Button
  id="blue_claim_button"
  visibility="Blue"
  active="true"
  position="-255 690 -3"
  rotation="0 0 0"
  scale="3.5 3.5"
  fontSize="20"
  width="80"
  height="40"
  image="blue_battlefield_claim"
  raycastTarget="false"
></Button>
<Panel
   id="blue_panel"
   visibility="Blue"
   active="false"
   position="0 -300 -5"
   rotation="0 0 0"
   scale="5.46 5.46"
   rectAlignment="MiddleCenter"
   width="80"
   height="96"
   image="ingame_gui_background"
   raycastTarget="false"
>
<Image
   offsetXY="0 34"
   width="80"
   height="24"
   image="ingame_blue_panel_overlay"
   raycastTarget="false"
></Image>
<Text
   id="blue_panel_red_cards"
   scale="0.3 0.3"
   offsetXY="-6 39"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Text
   id="blue_panel_blue_cards"
   scale="0.3 0.3"
   offsetXY="-6 29"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Text
   id="blue_panel_red_resources"
   scale="0.3 0.3"
   offsetXY="24 39"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Text
   id="blue_panel_blue_resources"
   scale="0.3 0.3"
   offsetXY="24 29"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Button
   offsetXY="30 56"
   width="10"
   height="10"
   onClick="Global/guiToggle"
   image="ingame_gui_maximize"
></Button>
<Button
   offsetXY="-18 7"
   width="28"
   height="28"
   onClick="Global/guiResource"
   image="ingame_gui_resource"
></Button>
<Button
   offsetXY="18 7"
   width="28"
   height="28"
   onClick="Global/guiPass"
   image="ingame_gui_pass"
></Button>
<Button
   offsetXY="-18 -28"
   width="28"
   height="28"
   onClick="Global/guiShuffle"
   image="ingame_gui_shuffle"
></Button>
<Button
   offsetXY="18 -28"
   width="28"
   height="28"
   onClick="Global/guiDiscard"
   image="ingame_gui_discard"
   fontSize="32"
   textColor="#000000"
></Button>
</Panel>
]])
  else
    self.UI.setXml([[
<Button
  id="red_claim_button"
  visibility="Red"
  active="true"
  position="-255 690 -3"
  rotation="0 0 0"
  scale="3.5 3.5"
  fontSize="20"
  width="80"
  height="40"
  image="red_battlefield_claim"
  raycastTarget="false"
></Button>
<Panel
   id="red_panel"
   visibility="Red"
   active="false"
   position="0 -300 -5"
   rotation="0 0 0"
   scale="5.46 5.46"
   rectAlignment="MiddleCenter"
   width="80"
   height="96"
   image="ingame_gui_background"
   raycastTarget="false"
>
<Image
   offsetXY="0 34"
   width="80"
   height="24"
   image="ingame_red_panel_overlay"
   raycastTarget="false"
></Image>
<Text
   id="red_panel_blue_cards"
   scale="0.3 0.3"
   offsetXY="-6 39"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Text
   id="red_panel_red_cards"
   scale="0.3 0.3"
   offsetXY="-6 29"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Text
   id="red_panel_blue_resources"
   scale="0.3 0.3"
   offsetXY="24 39"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Text
   id="red_panel_red_resources"
   scale="0.3 0.3"
   offsetXY="24 29"
   fontStyle="Bold"
   fontSize="36"
   color="#FFFFFF"
>0</Text>
<Button
   offsetXY="30 56"
   width="10"
   height="10"
   onClick="Global/guiToggle"
   image="ingame_gui_maximize"
></Button>
<Button
   offsetXY="-18 7"
   width="28"
   height="28"
   onClick="Global/guiResource"
   image="ingame_gui_resource"
></Button>
<Button
   offsetXY="18 7"
   width="28"
   height="28"
   onClick="Global/guiPass"
   image="ingame_gui_pass"
></Button>
<Button
   offsetXY="-18 -28"
   width="28"
   height="28"
   onClick="Global/guiShuffle"
   image="ingame_gui_shuffle"
></Button>
<Button
   offsetXY="18 -28"
   width="28"
   height="28"
   onClick="Global/guiDiscard"
   image="ingame_gui_discard"
   fontSize="32"
   textColor="#000000"
></Button>
</Panel>
]])
  end

  resourceSpawnIndex = 0
  discardCounter = 0
end

function passButton()
  if owner == 'Blue' then
    broadcastToAll('Pass', {0.1,0.5,1.0})
  else
    broadcastToAll('Pass', {0.8,0.1,0.1})
  end
end

function resourceSpawned(newResource)
  newResource.setName("1 resource")
  newResource.tooltip = false
end

function spawnResource()
  local zoneObject = nil
  local zonePosition = {}
  local spawnReference = {x=0, y=0, z=0}
  local obj_parameters = {}
  local custom = {}
  local token = nil
  local xFactor = 1
  local zFactor = 1

  if owner == 'Blue' then
    zoneObject = Global.getVar("blueResourceZone")
    if (zoneObject != nil) then
      zonePosition = zoneObject.getPosition()
      spawnReference = {x = (zonePosition.x + 1.54), y = (zonePosition.y - 1.00), z = (zonePosition.z + 1.29)}
    end

    xFactor = (-1)
    zFactor = (-1)
  else
    zoneObject = Global.getVar("redResourceZone")
    if (zoneObject != nil) then
      zonePosition = zoneObject.getPosition()
      spawnReference = {x = (zonePosition.x - 1.54), y = (zonePosition.y - 1.00), z = (zonePosition.z - 1.29)}
    end

    xFactor = 1
    zFactor = 1
  end

  obj_parameters.type = 'Custom_Token'
  obj_parameters.callback_function = resourceSpawned
  obj_parameters.position = {}
  obj_parameters.position.x = (spawnReference.x + (xFactor * (resourceSpawnIndex % 4)))
  obj_parameters.position.y = spawnReference.y
  obj_parameters.position.z = (spawnReference.z + (zFactor * math.floor(resourceSpawnIndex / 4)))
  obj_parameters.rotation = {0,0,0}

  custom.image = tokenplayerone.resource
  custom.thickness = 0.1
  custom.merge_distance = 5.0
  custom.stackable = false

  token = spawnObject(obj_parameters)
  token.setCustomObject(custom)
  token.scale {0.23, 1.00, 0.23}

  resourceSpawnIndex = (resourceSpawnIndex + 1)
  if resourceSpawnIndex >= 20 then
    resourceSpawnIndex = 0
  end
end

function randomDiscard()
  local handObjects = Player[owner].getHandObjects()
  local numHandObjects = #handObjects
  local discardPosition = {}
  local cardChoice = nil

  if numHandObjects > 0 then
    cardChoice = math.random(numHandObjects)

    if owner == 'Blue' then
      discardPosition.x = (-26.29)
      discardPosition.y = 2.20
      discardPosition.z = (6.59 + discardCounter)
    else
      discardPosition.x = 26.29
      discardPosition.y = 2.20
      discardPosition.z = ((-6.59) - discardCounter)
    end

    -- Teleport first to avoid the hand zone grabbing the card back.
    handObjects[cardChoice].setPosition(discardPosition)
    -- Now move fast with no collision using smooth motion so that the card will fall.
    discardPosition.y = (discardPosition.y - 0.20)
    handObjects[cardChoice].setPositionSmooth(discardPosition, false, true)

    discardCounter = (discardCounter + 1)
    if discardCounter >= 5 then
      discardCounter = 0
    end
  end
end

function shuffleHand()
  local handObjects = Player[owner].getHandObjects()
  local numHandObjects = #handObjects
  local cardPositions = {}

  if numHandObjects > 0 then
    for i, v in pairs(handObjects) do
        cardPositions[i] = v.getPosition()
    end
    local handObjectsShuffled = shuffleTable(handObjects)
    local cardPositionsShuffled = shuffleTable(cardPositions)
    for i, v in pairs(handObjectsShuffled) do
        v.setPosition(cardPositionsShuffled[i])
    end
  end
end

function shuffleTable(t)
    for i = #t, 2, -1 do
        local n = math.random(i)
        t[i], t[n] = t[n], t[i]
    end
    return t
end

function onDrop(playerColor)
  local objectPosition = self.getPosition()
  local battlefieldZone = nil
  local resourceZone = nil
  local matZone = nil

  -- Update zones to match the board position.

  if (owner == 'Blue') then
    battlefieldZone = Global.getVar("blueBattlefieldZone")
    resourceZone = Global.getVar("blueResourceZone")
    matZone = Global.getVar("blueMatZone")

    if battlefieldZone != nil then
      battlefieldZone.setPosition({x = (objectPosition.x + 2.43), y = (objectPosition.y + 1.50), z = (objectPosition.z - 9.73)})
    end

    if resourceZone != nil then
      resourceZone.setPosition({x = (objectPosition.x - 2.18), y = (objectPosition.y + 1.50), z = (objectPosition.z - 9.68)})
    end

    if matZone != nil then
      matZone.setPosition({x = (objectPosition.x + 25.64), y = (objectPosition.y + 2.50), z = (objectPosition.z + 0.20)})
    end
  else
    battlefieldZone = Global.getVar("redBattlefieldZone")
    resourceZone = Global.getVar("redResourceZone")
    matZone = Global.getVar("redMatZone")

    if battlefieldZone != nil then
      battlefieldZone.setPosition({x = (objectPosition.x - 2.43), y = (objectPosition.y + 1.50), z = (objectPosition.z + 9.73)})
    end

    if resourceZone != nil then
      resourceZone.setPosition({x = (objectPosition.x + 2.18), y = (objectPosition.y + 1.50), z = (objectPosition.z + 9.68)})
    end

    if matZone != nil then
      matZone.setPosition({x = (objectPosition.x - 25.64), y = (objectPosition.y + 2.50), z = (objectPosition.z - 0.20)})
    end
  end
end

function handlePossibleDiceSpawn(params)
  local position = self.getPosition()
  local object = params.cardObject
  local obj_parameters = {}
  local custom = {}
  obj_parameters.type = 'Custom_Dice'
  obj_parameters.scale = {1.7,1.7,1.7}
  obj_parameters.position = {object.getPosition()[1],object.getPosition()[2]+1,object.getPosition()[3]}
  obj_parameters.rotation = {0,object.getRotation()[2]+180,0}
  local datatable = Global.getTable("cardstable")

  if ((object.getVar("spawned") ~= true) and
      (object.tag == 'Card') and
      (Global.getVar("loadDelayFinished") == true)) then
    local cardFound = false
    local isDiceCard = false
    local isCharacterCard = false
    local cardDescription = object.getDescription()
    local cardDescriptionLength = 0
    local testCardType = nil
    local dataTableIndex = 1
    local fixedCardName = ''
    local isElite = false

    if cardDescription != nil then
      cardDescriptionLength = string.len(cardDescription)
      if string.sub(cardDescription, 1, 5) == 'elite' then
        isElite = true
      end
    end

    -- If there is text past "elite", or the card is not elite and there is text at all, the card uses the new format.
    if (((isElite == true) and (cardDescriptionLength > 5)) or
        ((isElite == false) and (cardDescriptionLength > 0))) then
      -- This is a new card export.  Extract the set and number.
      local cardSet = ''
      local cardNumber = ''
      local setCharIndex = 1
      local numberCharIndex = 1
      if (isElite == true) then
        setCharIndex = 7
      else
        setCharIndex = 1
      end

      -- Do a plain search.
      numberCharIndex = (string.find(cardDescription, ' ', setCharIndex, true) + 1)
      cardSet = string.sub(cardDescription, setCharIndex, (numberCharIndex - 2))
      -- Leaving out the third argument takes a substring to the end of the string.
      cardNumber = string.sub(cardDescription, numberCharIndex)

      -- Find the card by its set and number.
      for i in ipairs(datatable) do
        testCardType = datatable[i]["type"]

        if ((datatable[i]["set"] == cardSet) and
            (datatable[i]["number"] == cardNumber) and
            ((testCardType == 'Upgrade') or (testCardType == 'Character') or (testCardType == 'Support') or (testCardType == 'Battlefield'))) then
          cardFound = true
          dataTableIndex = i
          fixedCardName = datatable[dataTableIndex]["cardname"]
          object.setName(fixedCardName)

          if (datatable[i]["diceimage"] != nil) then
            isDiceCard = true
          end

          break
        end
      end

      local diceSpawnDebug = Global.getVar("diceSpawnDebug")

      if (cardFound == false) then
        if diceSpawnDebug == true then
          printToAll("Error, card " .. cardSet .. " " .. cardNumber .. " not found (make sure it is not a support).", {1,0,0})
        end
      end
    else
      -- This is an old card export.  Use the old system.
      fixedCardName = Global.call("fixCardName", { object.getName() })
      object.setName(fixedCardName)
      for i in ipairs(datatable) do
        testCardType = datatable[i]["type"]

        if ((datatable[i]["cardname"] == fixedCardName) and
            ((testCardType == 'Upgrade') or (testCardType == 'Character') or (testCardType == 'Support') or (testCardType == 'Battlefield'))) then
          cardFound = true
          dataTableIndex = i

          if (datatable[i]["diceimage"] != nil) then
            isDiceCard = true
          end

          break
        end
      end

      if (cardFound == false) then
        if diceSpawnDebug == true then
          printToAll("Error, card " .. fixedCardName .. " not found (make sure it is not a support).", {1,0,0})
        end
      end
    end

    if (cardFound == true) then
      -- For character cards, spawn the dice on the table for ease of rollout.
      zOffset = 0
      if (datatable[dataTableIndex]["type"] == 'Character') then
        isCharacterCard = true
        if (owner == 'Blue') then
          zOffset = (-6)
        else
          zOffset = 5
        end
      end

      object.setVar("spawned", true)
      if (isDiceCard == true) then
        obj_parameters.position[3] = (obj_parameters.position[3] + zOffset)
        local dice = spawnObject(obj_parameters)
        custom.image = datatable[dataTableIndex]["diceimage"]
        dice.setCustomObject(custom)
      end

      if (fixedCardName == 'Seventh Sister, Agile Inquisitor') then
        obj_parameters.position = {object.getPosition()[1]+1, object.getPosition()[2]+1, (object.getPosition()[3] + zOffset)}
        local extradice = spawnObject(obj_parameters)
        custom.image = "http://cloud-3.steamusercontent.com/ugc/869614883116891249/E95F6BDCAD82D95AEEFF7798BA2EB89013F1C530/"
        extradice.setCustomObject(custom)
        custom.image = datatable[dataTableIndex]["diceimage"]
      elseif (fixedCardName == "Backup Muscle") then
        obj_parameters.type = 'Custom_Token'
        obj_parameters.rotation = {3.87674022, 0, 0.239081308}
        obj_parameters.scale = {0.227068469, 1, 0.227068469}
        for i=1,3 do
          obj_parameters.position = {object.getPosition()[1]-1.5+(i*0.7),object.getPosition()[2]+0.2,object.getPosition()[3]-1.5+(i*0.7)}
          local token = spawnObject(obj_parameters)
          local custom = {}
          custom.image = tokenplayerone.damageone
          custom.thickness = 0.1
          custom.merge_distance = 5.0
          custom.stackable = false
          token.setCustomObject(custom)
        end
      elseif (fixedCardName == "Modified HWK-290") then
        obj_parameters.type = 'Custom_Token'
        obj_parameters.rotation = {3.87674022, 0, 0.239081308}
        obj_parameters.scale = {0.227068469, 1, 0.227068469}
        for i=1,2 do
          obj_parameters.position = {object.getPosition()[1]-1.5+(i*0.7),object.getPosition()[2]+0.2,object.getPosition()[3]-1.5+(i*0.7)}
          local token = spawnObject(obj_parameters)
          local custom = {}
          custom.image = tokenplayerone.damageone
          custom.thickness = 0.1
          custom.merge_distance = 5.0
          custom.stackable = false
          token.setCustomObject(custom)
        end
      elseif (fixedCardName == "Air Superiority") then
        obj_parameters.type = 'Custom_Token'
        obj_parameters.rotation = {3.87674022, 0, 0.239081308}
        obj_parameters.scale = {0.227068469, 1, 0.227068469}
        for i=1,3 do
          obj_parameters.position = {object.getPosition()[1]-1.5+(i*0.7),object.getPosition()[2]+0.2,object.getPosition()[3]-1.5+(i*0.7)}
          local token = spawnObject(obj_parameters)
          local custom = {}
          custom.image = tokenplayerone.shield
          custom.thickness = 0.1
          custom.merge_distance = 5.0
          custom.stackable = false
          token.setCustomObject(custom)
        end
      end

      if (isDiceCard == true) then
        if (isElite == true) then
          obj_parameters.position = {object.getPosition()[1], object.getPosition()[2]+1, (object.getPosition()[3] + 1 + zOffset)}
          local dice = spawnObject(obj_parameters)
          dice.setCustomObject(custom)
        end
      end
    end

    -- For character cards, create XML GUI when the dice spawn.
    if (isCharacterCard == true) then
      -- Since attaching the GUI directly to the card would cause the GUI to rotate when the card rotates, use a GUI holder object.
      obj_parameters.type = 'BlockSquare'
      obj_parameters.position = {object.getPosition()[1], 0.02, object.getPosition()[3]}
      if (owner == 'Blue') then
        obj_parameters.rotation = {0, 0, 0}
      else
        obj_parameters.rotation = {0, 180, 0}
      end
      obj_parameters.scale = {1, 1, 1}
      obj_parameters.sound = false
      -- Note that both the character card and the GUI holder objects have scripts.
      obj_parameters.callback_function = function(newObject) initGUIHolder(object, newObject) end

      local cardGUIObject = spawnObject(obj_parameters)
    end
  else
    local linkedGUIHolder = object.getVar("linkedGUIHolder")

    -- If a GUI holder was linked and hidden, show it.
    if (linkedGUIHolder != nil) then
      -- Update the position.
      local cardPosition = object.getPosition()
      linkedGUIHolder.setPosition({x = cardPosition.x, y = 0.02, z = cardPosition.z})

      if (linkedGUIHolder.UI.getAttribute("card_gui", "active") == "False") then
        linkedGUIHolder.UI.setAttribute("card_gui", "active", true)
        linkedGUIHolder.UI.setAttribute("opponent_card_gui", "active", true)

        -- Update the visibility to match the prefab owner.
        if (owner == 'Blue') then
          linkedGUIHolder.setRotation({0, 0, 0})
        else
          linkedGUIHolder.setRotation({0, 180, 0})
        end
        linkedGUIHolder.UI.setAttribute("card_gui", "visibility", owner)
        if (owner == 'Blue') then
          linkedGUIHolder.UI.setAttribute("opponent_card_gui", "visibility", 'Red|Grey|Black')
        else
          linkedGUIHolder.UI.setAttribute("opponent_card_gui", "visibility", 'Blue|Grey|Black')
        end
      end
    end
  end
end

function initGUIHolder(cardObject, holderObject)
  -- Set shield and damage values.
  -- TODO is there a way to save/load variables on objects like this?
  holderObject.setVar("shields", 0)
  holderObject.setVar("damage", 0)
  holderObject.setVar("owner", owner)

  holderObject.setLuaScript(Global.getVar("characterGUILuaScript"))
  Wait.time(function() finishInitGUIHolder(cardObject, holderObject) end, 0.2)

  cardObject.setVar("linkedGUIHolder", holderObject)
end

function finishInitGUIHolder(cardObject, holderObject)
  holderObject.UI.setAttribute("card_gui", "visibility", owner)
  holderObject.UI.setAttribute("card_gui", "active", true)
  if (owner == 'Blue') then
    holderObject.UI.setAttribute("opponent_card_gui", "visibility", 'Red|Grey|Black')
  else
    holderObject.UI.setAttribute("opponent_card_gui", "visibility", 'Blue|Grey|Black')
  end
  holderObject.UI.setAttribute("opponent_card_gui", "active", true)
end
